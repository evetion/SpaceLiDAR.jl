{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpaceLiDAR \u00b6 A Julia toolbox for ICESat, ICESat-2 and GEDI data. Quickly search , download and load filtered point data with relevant attributes from the .h5 granules of each data product. For a quick overview, see the FOSS4G Pluto notebook here . This is a research package, things are quick to change. Supported data products \u00b6 Currently supports the following data products: mission data product User Guide (UG) Algorithm Theoretical Basis Document (ATBD) ICESat GLAH06 v34 UG ATBD ICESat GLAH14 v34 UG ATBD ICESat-2 ATL03 v5 UG ATBD ICESat-2 ATL06 v5 UG ATBD ICESat-2 ATL08 v5 UG ATBD ICESat-2 ATL12 v5 UG ATBD GEDI L2A v2 UG ATBD Documentation \u00b6 This documentation is set up using the Divio documentation system and thus split into Tutorials , Guides , Topics and References . Publications \u00b6 The code produced for the following paper was the beginning of this package: Vernimmen, Ronald, Aljosja Hooijer, and Maarten Pronk. 2020. \u2018New ICESat-2 Satellite LiDAR Data Allow First Global Lowland DTM Suitable for Accurate Coastal Flood Risk Assessment\u2019. Remote Sensing 12 (17): 2827. https://doi.org/10/gg9dg6 . The DTM produced using ICESat-2 ATL08 data was in turn used for: Hooijer, A., and R. Vernimmen. 2021. \u2018Global LiDAR Land Elevation Data Reveal Greatest Sea-Level Rise Vulnerability in the Tropics\u2019. Nature Communications 12 (1): 3592. https://doi.org/10/gkzf49 .","title":"Home"},{"location":"#spacelidar","text":"A Julia toolbox for ICESat, ICESat-2 and GEDI data. Quickly search , download and load filtered point data with relevant attributes from the .h5 granules of each data product. For a quick overview, see the FOSS4G Pluto notebook here . This is a research package, things are quick to change.","title":"SpaceLiDAR"},{"location":"#supported-data-products","text":"Currently supports the following data products: mission data product User Guide (UG) Algorithm Theoretical Basis Document (ATBD) ICESat GLAH06 v34 UG ATBD ICESat GLAH14 v34 UG ATBD ICESat-2 ATL03 v5 UG ATBD ICESat-2 ATL06 v5 UG ATBD ICESat-2 ATL08 v5 UG ATBD ICESat-2 ATL12 v5 UG ATBD GEDI L2A v2 UG ATBD","title":"Supported data products"},{"location":"#documentation","text":"This documentation is set up using the Divio documentation system and thus split into Tutorials , Guides , Topics and References .","title":"Documentation"},{"location":"#publications","text":"The code produced for the following paper was the beginning of this package: Vernimmen, Ronald, Aljosja Hooijer, and Maarten Pronk. 2020. \u2018New ICESat-2 Satellite LiDAR Data Allow First Global Lowland DTM Suitable for Accurate Coastal Flood Risk Assessment\u2019. Remote Sensing 12 (17): 2827. https://doi.org/10/gg9dg6 . The DTM produced using ICESat-2 ATL08 data was in turn used for: Hooijer, A., and R. Vernimmen. 2021. \u2018Global LiDAR Land Elevation Data Reveal Greatest Sea-Level Rise Vulnerability in the Tropics\u2019. Nature Communications 12 (1): 3592. https://doi.org/10/gkzf49 .","title":"Publications"},{"location":"changelog/","text":"Unreleased \u00b6 Extents support Search using polygons ICESat-2 S3 access 20m resolution data in ICESat-2 ATL08 v05 v0.2.0 \u00b6 Danger This is a breaking release Many of the column names have changed to be more descriptive. Documentation and docstring improvements. Tables support, you can now do DataFrame(granule) , without having to call points(granule) . Memory use improvements, by using SentinelArray of FillArray under the hood. Dropped S3, GeoArrays and LAS/LAZ support. Added GeoInterface support for lines/points and dropped GeoDataFrames Expanded test coverage. v0.1.6 \u00b6 Support for ICESat GLAH06 by alex-s-gardner v0.1.5 \u00b6 Support for ICESat-2 ATL06 Update search to use v5 for ICESat-2 by default v0.1.4 \u00b6 Compatibility fixes v0.1.3 \u00b6 Added interpolation for GeoArrays Added FOSS4G notebook","title":"Changelog"},{"location":"changelog/#unreleased","text":"Extents support Search using polygons ICESat-2 S3 access 20m resolution data in ICESat-2 ATL08 v05","title":"Unreleased"},{"location":"changelog/#v020","text":"Danger This is a breaking release Many of the column names have changed to be more descriptive. Documentation and docstring improvements. Tables support, you can now do DataFrame(granule) , without having to call points(granule) . Memory use improvements, by using SentinelArray of FillArray under the hood. Dropped S3, GeoArrays and LAS/LAZ support. Added GeoInterface support for lines/points and dropped GeoDataFrames Expanded test coverage.","title":"v0.2.0"},{"location":"changelog/#v016","text":"Support for ICESat GLAH06 by alex-s-gardner","title":"v0.1.6"},{"location":"changelog/#v015","text":"Support for ICESat-2 ATL06 Update search to use v5 for ICESat-2 by default","title":"v0.1.5"},{"location":"changelog/#v014","text":"Compatibility fixes","title":"v0.1.4"},{"location":"changelog/#v013","text":"Added interpolation for GeoArrays Added FOSS4G notebook","title":"v0.1.3"},{"location":"guides/downloads/","text":"Downloading \u00b6 As shown in Tutorial: Search for data , it is easy to find data. Downloading the data might be harder though, especially when downloading a large amount of granules or even mirroring a complete DAAC. Indeed, the Julia download! won't work in parallel, nor will it resume downloads or show its progress. In such cases it's useful to export a list of granules to a text file and use an external download tool: granules = find ( :ICESat2 , \"ATL08\" ) SpaceLiDAR . write_granule_urls! ( \"atl08_world.txt\" , granules ) In my case, I use aria2c . Note that downloading from the granule urls require a EarthData login, normally setup in an .netrc file (also see netrc! ). aria2c -c -i atl08_world.txt Once finished, one can again instantiate the list of granules with the folder to which all files have been downloaded.","title":"Downloading"},{"location":"guides/downloads/#downloading","text":"As shown in Tutorial: Search for data , it is easy to find data. Downloading the data might be harder though, especially when downloading a large amount of granules or even mirroring a complete DAAC. Indeed, the Julia download! won't work in parallel, nor will it resume downloads or show its progress. In such cases it's useful to export a list of granules to a text file and use an external download tool: granules = find ( :ICESat2 , \"ATL08\" ) SpaceLiDAR . write_granule_urls! ( \"atl08_world.txt\" , granules ) In my case, I use aria2c . Note that downloading from the granule urls require a EarthData login, normally setup in an .netrc file (also see netrc! ). aria2c -c -i atl08_world.txt Once finished, one can again instantiate the list of granules with the folder to which all files have been downloaded.","title":"Downloading"},{"location":"guides/tracks/","text":"Track filtering \u00b6 Coming soon","title":"Track filtering"},{"location":"guides/tracks/#track-filtering","text":"Coming soon","title":"Track filtering"},{"location":"reference/api/","text":"API reference \u00b6 SpaceLiDAR.GEDI_Granule SpaceLiDAR.ICESat2_Granule SpaceLiDAR.ICESat_Granule Base.convert SpaceLiDAR.angle! SpaceLiDAR.bounds SpaceLiDAR.classify SpaceLiDAR.download! SpaceLiDAR.download! SpaceLiDAR.find SpaceLiDAR.granule_from_file SpaceLiDAR.granules_from_folder SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.instantiate SpaceLiDAR.isvalid SpaceLiDAR.netrc! SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.rm SpaceLiDAR.shift SpaceLiDAR.to_egm2008!","title":"Index"},{"location":"reference/api/#api-reference","text":"SpaceLiDAR.GEDI_Granule SpaceLiDAR.ICESat2_Granule SpaceLiDAR.ICESat_Granule Base.convert SpaceLiDAR.angle! SpaceLiDAR.bounds SpaceLiDAR.classify SpaceLiDAR.download! SpaceLiDAR.download! SpaceLiDAR.find SpaceLiDAR.granule_from_file SpaceLiDAR.granules_from_folder SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.instantiate SpaceLiDAR.isvalid SpaceLiDAR.netrc! SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.points SpaceLiDAR.rm SpaceLiDAR.shift SpaceLiDAR.to_egm2008!","title":"API reference"},{"location":"reference/data/","text":"Data \u00b6 ICESat \u00b6 # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat_Granule { :GLAH06 }) Retrieve the points for a given ICESat GLAH06 (Land Ice) granule as a list of namedtuples The names of the tuples are based on the following fields: Variable Original Field Description Units longitude Data_40HZ/Geolocation/d_lon Longitude of segment center, WGS84, East=+ decimal degrees latitude Data_40HZ/Geolocation/d_lat Latitude of segment center, WGS84, North=+ decimal degrees height Data_40HZ/Elevation_Surfaces/d_elev + Data_40HZ/Elevation_Corrections/d_satElevCorr m above WGS84 ellipsoid datetime Data_40HZ/DS_UTCTime_40 Precise time of aquisiton date-time quality 1 Data_40HZ/Quality/elev_use_flg & Data_40HZ/Quality/sigma_att_flg = 0 & Data_40HZ/Waveform/i_numPk = 1 & Data_40HZ/Elevation_Corrections/d_satElevCorr < 3 1 = high quality height_reference land_ice_segments/dem/dem_h Height of the (best available) DEM height above WGS84 You can get the output in a DataFrame with DataFrame(points(g)) . source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat_Granule { :GLAH14 }) Retrieve the points for a given ICESat GLAH14 (Land Surface) granule as a list of namedtuples The names of the tuples are based on the following fields: Variable Original Field (in Data_40HZ ) Description Units longitude /Geolocation/d_lon Longitude of segment center, WGS84, East=+ decimal degrees latitude Geolocation/d_lat Latitude of segment center, WGS84, North=+ decimal degrees height Elevation_Surfaces/d_elev + Elevation_Corrections/d_satElevCorr m above WGS84 ellipsoid datetime DS_UTCTime_40 Precise time of aquisiton date-time quality 1 Quality/elev_use_flg & Quality/sigma_att_flg = 0 & Waveform/i_numPk = 1 & Elevation_Corrections/d_satElevCorr < 3 1=high quality clouds Elevation_Flags/elv_cloud_flg Cloud contamination - height_reference Geophysical/d_DEM_elv Height of the (best available) DEM height above WGS84 gain Waveform/i_gval_rcv Gain value used for received pulse. - reflectivity Reflectivity/d_reflctUC Reflectivity, not corrected - attitude Quality/sigma_att_flg Attitude quality indicator 0=good; 50=warning; 100=bad; saturation Quality/sat_corr_flg Saturation Correction Flag 0=not_saturated; You can get the output in a DataFrame with DataFrame(points(g)) . source ICESat-2 \u00b6 # SpaceLiDAR.classify \u2014 Function . classify ( granule :: ICESat2_Granule { :ATL03 }, atl08 :: Union { ICESat2_Granule { :ATL08 }, Nothing } = nothing , tracks = icesat2_tracks ) Like points(::ICESat2_Granule{:ATL03}) but with the classification from the ATL08 dataset. If an ATL08 granule is not provided, we try to find it based on the ATL03 name using convert . source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL03 }, tracks = icesat2_tracks , step = 1 ) Retrieve the points for a given ICESat-2 ATL03 (Global Geolocated Photon Data) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude heights/lon_ph Longitude of photon, WGS84, East=+ decimal degrees latitude heights/lat_ph Latitude of photon, WGS84, North=+ decimal degrees height heights/h_ph Photon WGS84 Height m above the WGS 84 ellipsoid quality heights/quality_ph Indicates the quality of the associated photon 0 = nominal uncertainty geolocation/sigma_h Estimated height uncertainty m datetime heights/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time confidence heights/signal_conf_ph Photon Signal Confidence 2=low; 3=med; 4=high segment geolocation/segment_id Along-track segment ID number - track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - sun_angle geolocation/solar_elevation Sun angle \u00b0 above horizon detector_id atlas_spot_number attribute - - height_reference heights/dem/dem_h Height of the (best available) DEM m above the WGS 84 ellipsoid You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL06 }, tracks = icesat2_tracks , step = 1 ) Retrieve the points for a given ICESat-2 ATL06 (Land Ice) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude land_ice_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude land_ice_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height land_ice_segments/h_li Standard land-ice segment height m above the WGS 84 ellipsoid height_error \u221a( land_ice_segments/sigma_geo_h \u00b2 + Total vertical geolocation error m above the WGS 84 ellipsoid land_ice_segments/h_li_sigma \u00b2) datetime land_ice_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality land_ice_segments/atl06_quality_summary Boolean flag indicating the best-quality subset 1 = high quality track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - detector_id atlas_spot_number attribute - - height_reference land_ice_segments/dem/dem_h Height of the (best available) DEM - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL08 }; tracks = icesat2_tracks , step = 1 , canopy = false , ground = true )) Retrieve the points for a given ICESat-2 ATL08 (Land and Vegetation Height) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude land_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude land_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height land_segments/terrain/h_te_mean Standard land-ice segment height m above the WGS 84 ellipsoid height_error land_segments/terrain/h_te_uncertainty Total vertical geolocation error m datetime land_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality land_segments/terrain_flg Boolean flag indicating the best-quality subset 1 = high quality phr land_segments/ph_removal_flag More than 50% of photons removed - sensitivity land_segments/snr The signal to noise ratio - scattered land_segments/msw_flag Multiple Scattering warning flag -1=unknown; 0=none saturated land_segments/sat_flag Saturation detected - clouds land_segments/layer_flag Clouds or blowing snow are likely present - track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - classification - \"ground\", \"high_canopy\" - height_reference land_segments/dem_h Height of the (best available) DEM m above the WGS 84 ellipsoid detector_id atlas_spot_number attribute - - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Function . points ( g :: ICESat2_Granule { :ATL12 }, tracks = icesat2_tracks ) Retrieve the points for a given ICESat-2 ATL12 (Ocean Surface Height) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude ssh_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude ssh_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height ssh_segments/heights/h Standard land-ice segment height m above the WGS 84 ellipsoid datetime ssh_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - detector_id atlas_spot_number attribute - - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source GEDI \u00b6 # SpaceLiDAR.points \u2014 Method . points ( g :: GEDI_Granule { :GEDI02_A }; tracks = gedi_tracks , step = 1 , canopy = false , ground = true , filtered = true ) Retrieve the points for a given GEDI Level 2A (Geolocated Elevation and Height Metrics) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude lon_lowestmode Longitude of center, WGS84, East=+ decimal degrees latitude lat_lowestmode Latitude of center, WGS84, North=+ decimal degrees height elev_lowestmode Standard land-ice segment height m above the WGS 84 ellipsoid height_error elevation_bin0_error Error in elevation of bin 0 m datetime delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality quality_flag Flag simpilfying selection of most useful data 1 = high quality surface surface_flag Indicates elev_lowestmode is within 300m of DEM or MSS 1 = high quality nmodes num_detectedmodes Number of detected modes in rxwaveform - intensity energy_total Integrated counts in the return waveform - sensitivity sensitivity Maxmimum canopy cover that can be penetrated - track BEAM0000 - BEAM1011 groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - classification - \"ground\", \"high_canopy\" - sun_angle solar_elevation Sun angle \u00b0 above horizon height_reference digital_elevation_model TanDEM-X elevation at GEDI footprint location m above the WGS 84 ellipsoid You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. Data is filtered by default based on 2 , except for the sensitivity field, which can be manually filtered to be above 0.9 and below or equal to 1.0 to match 2 . source Smith, B., Fricker, H. A., Gardner, A. S., Medley, B., Nilsson, J., Paolo, F. S., ... & Zwally, H. J. (2020). Pervasive ice sheet mass loss reflects competing ocean and atmosphere processes. Science, 368(6496), 1239-1242. \u21a9 \u21a9 Dubayah, R. O., S. B. Luthcke, T. J. Sabaka, J. B. Nicholas, S. Preaux, and M. A. Hofton. 2021. \u201cGEDI L3 Gridded Land Surface Metrics, Version 2.\u201d ORNL DAAC, November. https://doi.org/10.3334/ORNLDAAC/1952. \u21a9 \u21a9","title":"Data"},{"location":"reference/data/#data","text":"","title":"Data"},{"location":"reference/data/#icesat","text":"# SpaceLiDAR.points \u2014 Method . points ( g :: ICESat_Granule { :GLAH06 }) Retrieve the points for a given ICESat GLAH06 (Land Ice) granule as a list of namedtuples The names of the tuples are based on the following fields: Variable Original Field Description Units longitude Data_40HZ/Geolocation/d_lon Longitude of segment center, WGS84, East=+ decimal degrees latitude Data_40HZ/Geolocation/d_lat Latitude of segment center, WGS84, North=+ decimal degrees height Data_40HZ/Elevation_Surfaces/d_elev + Data_40HZ/Elevation_Corrections/d_satElevCorr m above WGS84 ellipsoid datetime Data_40HZ/DS_UTCTime_40 Precise time of aquisiton date-time quality 1 Data_40HZ/Quality/elev_use_flg & Data_40HZ/Quality/sigma_att_flg = 0 & Data_40HZ/Waveform/i_numPk = 1 & Data_40HZ/Elevation_Corrections/d_satElevCorr < 3 1 = high quality height_reference land_ice_segments/dem/dem_h Height of the (best available) DEM height above WGS84 You can get the output in a DataFrame with DataFrame(points(g)) . source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat_Granule { :GLAH14 }) Retrieve the points for a given ICESat GLAH14 (Land Surface) granule as a list of namedtuples The names of the tuples are based on the following fields: Variable Original Field (in Data_40HZ ) Description Units longitude /Geolocation/d_lon Longitude of segment center, WGS84, East=+ decimal degrees latitude Geolocation/d_lat Latitude of segment center, WGS84, North=+ decimal degrees height Elevation_Surfaces/d_elev + Elevation_Corrections/d_satElevCorr m above WGS84 ellipsoid datetime DS_UTCTime_40 Precise time of aquisiton date-time quality 1 Quality/elev_use_flg & Quality/sigma_att_flg = 0 & Waveform/i_numPk = 1 & Elevation_Corrections/d_satElevCorr < 3 1=high quality clouds Elevation_Flags/elv_cloud_flg Cloud contamination - height_reference Geophysical/d_DEM_elv Height of the (best available) DEM height above WGS84 gain Waveform/i_gval_rcv Gain value used for received pulse. - reflectivity Reflectivity/d_reflctUC Reflectivity, not corrected - attitude Quality/sigma_att_flg Attitude quality indicator 0=good; 50=warning; 100=bad; saturation Quality/sat_corr_flg Saturation Correction Flag 0=not_saturated; You can get the output in a DataFrame with DataFrame(points(g)) . source","title":"ICESat"},{"location":"reference/data/#icesat-2","text":"# SpaceLiDAR.classify \u2014 Function . classify ( granule :: ICESat2_Granule { :ATL03 }, atl08 :: Union { ICESat2_Granule { :ATL08 }, Nothing } = nothing , tracks = icesat2_tracks ) Like points(::ICESat2_Granule{:ATL03}) but with the classification from the ATL08 dataset. If an ATL08 granule is not provided, we try to find it based on the ATL03 name using convert . source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL03 }, tracks = icesat2_tracks , step = 1 ) Retrieve the points for a given ICESat-2 ATL03 (Global Geolocated Photon Data) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude heights/lon_ph Longitude of photon, WGS84, East=+ decimal degrees latitude heights/lat_ph Latitude of photon, WGS84, North=+ decimal degrees height heights/h_ph Photon WGS84 Height m above the WGS 84 ellipsoid quality heights/quality_ph Indicates the quality of the associated photon 0 = nominal uncertainty geolocation/sigma_h Estimated height uncertainty m datetime heights/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time confidence heights/signal_conf_ph Photon Signal Confidence 2=low; 3=med; 4=high segment geolocation/segment_id Along-track segment ID number - track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - sun_angle geolocation/solar_elevation Sun angle \u00b0 above horizon detector_id atlas_spot_number attribute - - height_reference heights/dem/dem_h Height of the (best available) DEM m above the WGS 84 ellipsoid You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL06 }, tracks = icesat2_tracks , step = 1 ) Retrieve the points for a given ICESat-2 ATL06 (Land Ice) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude land_ice_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude land_ice_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height land_ice_segments/h_li Standard land-ice segment height m above the WGS 84 ellipsoid height_error \u221a( land_ice_segments/sigma_geo_h \u00b2 + Total vertical geolocation error m above the WGS 84 ellipsoid land_ice_segments/h_li_sigma \u00b2) datetime land_ice_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality land_ice_segments/atl06_quality_summary Boolean flag indicating the best-quality subset 1 = high quality track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - detector_id atlas_spot_number attribute - - height_reference land_ice_segments/dem/dem_h Height of the (best available) DEM - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Method . points ( g :: ICESat2_Granule { :ATL08 }; tracks = icesat2_tracks , step = 1 , canopy = false , ground = true )) Retrieve the points for a given ICESat-2 ATL08 (Land and Vegetation Height) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude land_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude land_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height land_segments/terrain/h_te_mean Standard land-ice segment height m above the WGS 84 ellipsoid height_error land_segments/terrain/h_te_uncertainty Total vertical geolocation error m datetime land_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality land_segments/terrain_flg Boolean flag indicating the best-quality subset 1 = high quality phr land_segments/ph_removal_flag More than 50% of photons removed - sensitivity land_segments/snr The signal to noise ratio - scattered land_segments/msw_flag Multiple Scattering warning flag -1=unknown; 0=none saturated land_segments/sat_flag Saturation detected - clouds land_segments/layer_flag Clouds or blowing snow are likely present - track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - classification - \"ground\", \"high_canopy\" - height_reference land_segments/dem_h Height of the (best available) DEM m above the WGS 84 ellipsoid detector_id atlas_spot_number attribute - - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source # SpaceLiDAR.points \u2014 Function . points ( g :: ICESat2_Granule { :ATL12 }, tracks = icesat2_tracks ) Retrieve the points for a given ICESat-2 ATL12 (Ocean Surface Height) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude ssh_segments/longitude Longitude of segment center, WGS84, East=+ decimal degrees latitude ssh_segments/latitude Latitude of segment center, WGS84, North=+ decimal degrees height ssh_segments/heights/h Standard land-ice segment height m above the WGS 84 ellipsoid datetime ssh_segments/delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time track gt1l - gt3r groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - detector_id atlas_spot_number attribute - - You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. source","title":"ICESat-2"},{"location":"reference/data/#gedi","text":"# SpaceLiDAR.points \u2014 Method . points ( g :: GEDI_Granule { :GEDI02_A }; tracks = gedi_tracks , step = 1 , canopy = false , ground = true , filtered = true ) Retrieve the points for a given GEDI Level 2A (Geolocated Elevation and Height Metrics) granule as a list of namedtuples, one for each beam. The names of the tuples are based on the following fields: Column Field Description Units longitude lon_lowestmode Longitude of center, WGS84, East=+ decimal degrees latitude lat_lowestmode Latitude of center, WGS84, North=+ decimal degrees height elev_lowestmode Standard land-ice segment height m above the WGS 84 ellipsoid height_error elevation_bin0_error Error in elevation of bin 0 m datetime delta_time + ancillary_data/atlas_sdp_gps_epoch + gps_offset date-time quality quality_flag Flag simpilfying selection of most useful data 1 = high quality surface surface_flag Indicates elev_lowestmode is within 300m of DEM or MSS 1 = high quality nmodes num_detectedmodes Number of detected modes in rxwaveform - intensity energy_total Integrated counts in the return waveform - sensitivity sensitivity Maxmimum canopy cover that can be penetrated - track BEAM0000 - BEAM1011 groups - - strong_beam - \"strong\" (true) or \"weak\" (false) laser power - classification - \"ground\", \"high_canopy\" - sun_angle solar_elevation Sun angle \u00b0 above horizon height_reference digital_elevation_model TanDEM-X elevation at GEDI footprint location m above the WGS 84 ellipsoid You can combine the output in a DataFrame with reduce(vcat, DataFrame.(points(g))) if you want to change the default arguments or DataFrame(g) with the default options. Data is filtered by default based on 2 , except for the sensitivity field, which can be manually filtered to be above 0.9 and below or equal to 1.0 to match 2 . source Smith, B., Fricker, H. A., Gardner, A. S., Medley, B., Nilsson, J., Paolo, F. S., ... & Zwally, H. J. (2020). Pervasive ice sheet mass loss reflects competing ocean and atmosphere processes. Science, 368(6496), 1239-1242. \u21a9 \u21a9 Dubayah, R. O., S. B. Luthcke, T. J. Sabaka, J. B. Nicholas, S. Preaux, and M. A. Hofton. 2021. \u201cGEDI L3 Gridded Land Surface Metrics, Version 2.\u201d ORNL DAAC, November. https://doi.org/10.3334/ORNLDAAC/1952. \u21a9 \u21a9","title":"GEDI"},{"location":"reference/granules/","text":"Granules \u00b6 # SpaceLiDAR.download! \u2014 Function . download! ( granules :: Vector { <: Granule }, folder = \".\" ) Like download! , but for a vector of granules . source # SpaceLiDAR.download! \u2014 Function . download! ( granule :: Granule , folder = \".\" ) Download the file associated with granule to the folder , from an http(s) location if it doesn't already exists locally. Will require credentials (netrc) which can be set with netrc! . source # SpaceLiDAR.rm \u2014 Method . rm ( granule :: Granule ) Remove the file associated with granule from the local filesystem. source # SpaceLiDAR.ICESat_Granule \u2014 Type . ICESat_Granule { product } <: Granule A granule of the ICESat product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # SpaceLiDAR.info \u2014 Method . info ( g :: ICESat_Granule ) Derive info based on the filename. The name is built up as follows: ATL03 yyyymmdd [ttttccss] [vvv rr].h5. See section 1.2.5 in the user guide. source # SpaceLiDAR.ICESat2_Granule \u2014 Type . ICESat2_Granule { product } <: Granule A granule of the ICESat-2 product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # Base.convert \u2014 Method . Base . convert ( product :: Symbol , g :: ICESat2_Granule { T }) Converts the granule g to the product product , by guessing the correct name. source # SpaceLiDAR.bounds \u2014 Method . bounds ( granule :: ICESat2_Granule ) Retrieves the bounding box of the granule. Warning This opens the .h5 file, so it is slow. Example julia > bounds ( g ) g = ICESat2_Granule () source # SpaceLiDAR.info \u2014 Method . info ( g :: ICESat2_Granule ) Derive info based on the filename. The name is built up as follows: ATL03_[yyyymmdd][hhmmss]_[ttttccss]_[vvv_rr].h5 . See section 1.2.5 in the user guide. source # SpaceLiDAR.GEDI_Granule \u2014 Type . GEDI_Granule { product } <: Granule A granule of the GEDI product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # SpaceLiDAR.info \u2014 Method . info ( g :: GEDI_Granule ) Derive info based on the filename. This is built up as follows: GEDI02_A_2019110014613_O01991_T04905_02_001_01.h5 or in case of v\"2\": GEDI02_A_2019242104318_O04046_01_T02343_02_003_02_V002.h5 . See section 2.4 in the user guide. source","title":"Granules"},{"location":"reference/granules/#granules","text":"# SpaceLiDAR.download! \u2014 Function . download! ( granules :: Vector { <: Granule }, folder = \".\" ) Like download! , but for a vector of granules . source # SpaceLiDAR.download! \u2014 Function . download! ( granule :: Granule , folder = \".\" ) Download the file associated with granule to the folder , from an http(s) location if it doesn't already exists locally. Will require credentials (netrc) which can be set with netrc! . source # SpaceLiDAR.rm \u2014 Method . rm ( granule :: Granule ) Remove the file associated with granule from the local filesystem. source # SpaceLiDAR.ICESat_Granule \u2014 Type . ICESat_Granule { product } <: Granule A granule of the ICESat product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # SpaceLiDAR.info \u2014 Method . info ( g :: ICESat_Granule ) Derive info based on the filename. The name is built up as follows: ATL03 yyyymmdd [ttttccss] [vvv rr].h5. See section 1.2.5 in the user guide. source # SpaceLiDAR.ICESat2_Granule \u2014 Type . ICESat2_Granule { product } <: Granule A granule of the ICESat-2 product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # Base.convert \u2014 Method . Base . convert ( product :: Symbol , g :: ICESat2_Granule { T }) Converts the granule g to the product product , by guessing the correct name. source # SpaceLiDAR.bounds \u2014 Method . bounds ( granule :: ICESat2_Granule ) Retrieves the bounding box of the granule. Warning This opens the .h5 file, so it is slow. Example julia > bounds ( g ) g = ICESat2_Granule () source # SpaceLiDAR.info \u2014 Method . info ( g :: ICESat2_Granule ) Derive info based on the filename. The name is built up as follows: ATL03_[yyyymmdd][hhmmss]_[ttttccss]_[vvv_rr].h5 . See section 1.2.5 in the user guide. source # SpaceLiDAR.GEDI_Granule \u2014 Type . GEDI_Granule { product } <: Granule A granule of the GEDI product product . Normally created automatically from either find , granule_from_file or granules_from_folder . source # SpaceLiDAR.info \u2014 Method . info ( g :: GEDI_Granule ) Derive info based on the filename. This is built up as follows: GEDI02_A_2019110014613_O01991_T04905_02_001_01.h5 or in case of v\"2\": GEDI02_A_2019242104318_O04046_01_T02343_02_003_02_V002.h5 . See section 2.4 in the user guide. source","title":"Granules"},{"location":"reference/search/","text":"Search \u00b6 # SpaceLiDAR.find \u2014 Function . find ( mission :: Mission , bbox :: NamedTuple {( :min_x , :min_y , :max_x , :max_y ), NTuple { 4 , Float64 }}) find ( :GEDI02_A , \"002\" ) # searches *all* GEDI v2 granules Find granules for a given mission and bounding box. source","title":"Search"},{"location":"reference/search/#search","text":"# SpaceLiDAR.find \u2014 Function . find ( mission :: Mission , bbox :: NamedTuple {( :min_x , :min_y , :max_x , :max_y ), NTuple { 4 , Float64 }}) find ( :GEDI02_A , \"002\" ) # searches *all* GEDI v2 granules Find granules for a given mission and bounding box. source","title":"Search"},{"location":"reference/utilities/","text":"Utilities \u00b6 # SpaceLiDAR.angle! \u2014 Method . angle! ( table ) Sets the angle column in table as returned from points . See angle for details. source # SpaceLiDAR.shift \u2014 Method . shift ( longitude , latitude , angle , distance ) Shift longitude and latitude with distance in [m] in direction angle , where North is 0\u00b0. Returns a tuple of the shifted coordinates: (longitude, latitude) . Useful for offsetting SpaceLiDAR points to the left or right of the track, in combination with angle . source # SpaceLiDAR.to_egm2008! \u2014 Method . to_egm2008! ( table ) Converts ellipsoid heights to geoid heights using the EGM2008 geoid model. Assumes a table as generated from points with columns :latitude , :longitude , and :height . Will overwrite the :height column with the geoid height. source # SpaceLiDAR.granule_from_file \u2014 Method . granule_from_file ( filename :: AbstractString ) Create a mission specific granule from a local .h5 filepath. For folder usage see granules_from_folder . source # SpaceLiDAR.granules_from_folder \u2014 Method . granules_from_folder ( foldername :: AbstractString ) Create mission specific granules from a folder with .h5 files, using granule_from_file . source <a id='SpaceLiDAR.instantiate-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:SpaceLiDAR.Granule' href='#SpaceLiDAR.instantiate-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:SpaceLiDAR.Granule'># SpaceLiDAR.instantiate \u2014 Method . instantiate ( granules :: Vector { :: Granule }, folder :: AbstractString ) For a given list of granules from find , match the granules to the local files and return a new list of granules with the local filepaths if they exist. source # SpaceLiDAR.isvalid \u2014 Method . isvalid ( g :: Granule ) Checks if a granule is has a valid, local and non-corrupt .h5 file. Can be combined with rm(::Granule) to remove invalid granules. source # SpaceLiDAR.netrc! \u2014 Method . netrc! ( username , password ) Writes/updates a .netrc file for ICESat-2 and GEDI downloads. A .netrc is a plaintext file containing your username and password for NASA EarthData and DAACs, and can be automatically used by Julia using Downloads and tools like wget , curl among others. source","title":"Utilities"},{"location":"reference/utilities/#utilities","text":"# SpaceLiDAR.angle! \u2014 Method . angle! ( table ) Sets the angle column in table as returned from points . See angle for details. source # SpaceLiDAR.shift \u2014 Method . shift ( longitude , latitude , angle , distance ) Shift longitude and latitude with distance in [m] in direction angle , where North is 0\u00b0. Returns a tuple of the shifted coordinates: (longitude, latitude) . Useful for offsetting SpaceLiDAR points to the left or right of the track, in combination with angle . source # SpaceLiDAR.to_egm2008! \u2014 Method . to_egm2008! ( table ) Converts ellipsoid heights to geoid heights using the EGM2008 geoid model. Assumes a table as generated from points with columns :latitude , :longitude , and :height . Will overwrite the :height column with the geoid height. source # SpaceLiDAR.granule_from_file \u2014 Method . granule_from_file ( filename :: AbstractString ) Create a mission specific granule from a local .h5 filepath. For folder usage see granules_from_folder . source # SpaceLiDAR.granules_from_folder \u2014 Method . granules_from_folder ( foldername :: AbstractString ) Create mission specific granules from a folder with .h5 files, using granule_from_file . source <a id='SpaceLiDAR.instantiate-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:SpaceLiDAR.Granule' href='#SpaceLiDAR.instantiate-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:SpaceLiDAR.Granule'># SpaceLiDAR.instantiate \u2014 Method . instantiate ( granules :: Vector { :: Granule }, folder :: AbstractString ) For a given list of granules from find , match the granules to the local files and return a new list of granules with the local filepaths if they exist. source # SpaceLiDAR.isvalid \u2014 Method . isvalid ( g :: Granule ) Checks if a granule is has a valid, local and non-corrupt .h5 file. Can be combined with rm(::Granule) to remove invalid granules. source # SpaceLiDAR.netrc! \u2014 Method . netrc! ( username , password ) Writes/updates a .netrc file for ICESat-2 and GEDI downloads. A .netrc is a plaintext file containing your username and password for NASA EarthData and DAACs, and can be automatically used by Julia using Downloads and tools like wget , curl among others. source","title":"Utilities"},{"location":"topics/GEDI/","text":"GEDI \u00b6 GEDI-launched in 2018-is attached to the ISS and is to investigate global ecosystems 1 . We currently only support the L2A product (at version 2). See their website . Dubayah, Ralph, James Bryan Blair, Scott Goetz, Lola Fatoyinbo, Matthew Hansen, Sean Healey, Michelle Hofton, et al. 2020. \u201cThe Global Ecosystem Dynamics Investigation: High-Resolution Laser Ranging of the Earth\u2019s Forests and Topography.\u201d Science of Remote Sensing 1 (June): 100002. https://doi.org/10/ggjxx8. \u21a9","title":"GEDI"},{"location":"topics/GEDI/#gedi","text":"GEDI-launched in 2018-is attached to the ISS and is to investigate global ecosystems 1 . We currently only support the L2A product (at version 2). See their website . Dubayah, Ralph, James Bryan Blair, Scott Goetz, Lola Fatoyinbo, Matthew Hansen, Sean Healey, Michelle Hofton, et al. 2020. \u201cThe Global Ecosystem Dynamics Investigation: High-Resolution Laser Ranging of the Earth\u2019s Forests and Topography.\u201d Science of Remote Sensing 1 (June): 100002. https://doi.org/10/ggjxx8. \u21a9","title":"GEDI"},{"location":"topics/ICESat-2/","text":"ICESat-2 \u00b6 ICESat-2 is in a polar orbit to investigate ice sheets 1 using its Advanced Topographic Laser Altimeter System (ATLAS). We currently support the ATL03, ATL06, ATL08 and ATL12 data products (at version 5). See their website . Markus, Thorsten, Tom Neumann, Anthony Martino, Waleed Abdalati, Kelly Brunt, Beata Csatho, Sinead Farrell, et al. 2017. \u201cThe Ice, Cloud, and Land Elevation Satellite-2 (ICESat-2): Science Requirements, Concept, and Implementation.\u201d Remote Sensing of Environment 190 (March): 260\u201373. https://doi.org/10/gg3f7c. \u21a9","title":"ICESat-2"},{"location":"topics/ICESat-2/#icesat-2","text":"ICESat-2 is in a polar orbit to investigate ice sheets 1 using its Advanced Topographic Laser Altimeter System (ATLAS). We currently support the ATL03, ATL06, ATL08 and ATL12 data products (at version 5). See their website . Markus, Thorsten, Tom Neumann, Anthony Martino, Waleed Abdalati, Kelly Brunt, Beata Csatho, Sinead Farrell, et al. 2017. \u201cThe Ice, Cloud, and Land Elevation Satellite-2 (ICESat-2): Science Requirements, Concept, and Implementation.\u201d Remote Sensing of Environment 190 (March): 260\u201373. https://doi.org/10/gg3f7c. \u21a9","title":"ICESat-2"},{"location":"topics/ICESat/","text":"ICESat \u00b6 The Ice, Cloud, and land Elevation Satellite (1) (ICESat) was the first earth-based LiDAR satellite 1 , launched in 2003, with the primary goal of ice sheet monitoring. It had an elevation accuracy of several cm 1 and was operational for five years. We currently support the GLAH06 (Land Ice) and GLA14 (Land Surface) data products (at version 34). See their website . Schutz, B. E., H. J. Zwally, C. A. Shuman, D. Hancock, and J. P. DiMarzio. 2005. \u201cOverview of the ICESat Mission.\u201d Geophysical Research Letters 32 (21). https://doi.org/10/bzbspg. \u21a9 \u21a9","title":"ICESat"},{"location":"topics/ICESat/#icesat","text":"The Ice, Cloud, and land Elevation Satellite (1) (ICESat) was the first earth-based LiDAR satellite 1 , launched in 2003, with the primary goal of ice sheet monitoring. It had an elevation accuracy of several cm 1 and was operational for five years. We currently support the GLAH06 (Land Ice) and GLA14 (Land Surface) data products (at version 34). See their website . Schutz, B. E., H. J. Zwally, C. A. Shuman, D. Hancock, and J. P. DiMarzio. 2005. \u201cOverview of the ICESat Mission.\u201d Geophysical Research Letters 32 (21). https://doi.org/10/bzbspg. \u21a9 \u21a9","title":"ICESat"},{"location":"tutorial/installation/","text":"Installation \u00b6 Use the Julia built-in package manager: ] add SpaceLiDAR","title":"Installation"},{"location":"tutorial/installation/#installation","text":"Use the Julia built-in package manager: ] add SpaceLiDAR","title":"Installation"},{"location":"tutorial/usage/","text":"Usage \u00b6 Search for data \u00b6 using SpaceLiDAR # Find all ATL08 granules granules = find ( :ICESat2 , \"ATL08\" ) # Find only ATL03 granules in a part of Vietnam vietnam = ( min_x = 102. , min_y = 8.0 , max_x = 107.0 , max_y = 12.0 ) granules = find ( :ICESat2 , \"ATL08\" , vietnam , \"004\" ) # Find GEDI granules in the same way granules = find ( :GEDI , \"GEDI02_A\" ) # A granule is pretty simple granule = granules [ 1 ] granule . id # filename granule . url # download url granule . info # derived information from id # Downloading granules requires a setup .netrc with an NASA EarthData account # we provide a helper function, that creates/updates a ~/.netrc or ~/_netrc SpaceLiDAR . netrc! ( < username > , < password > ) # replace with your credentials # Afterward you can download (requires curl to be available on PATH) fn = SpaceLiDAR . download! ( granule ) # You can also load a granule from disk granule = granule_from_file ( fn ) # Or from a folder local_granules = granules_from_folder ( < folder > ) # Instantiate search results locally (useful for GEDI location indexing) local_granules = instantiate ( granules , < folder > ) Derive points \u00b6 using DataFrames fn = \"GEDI02_A_2019242104318_O04046_01_T02343_02_003_02_V002.h5\" g = SpaceLiDAR . granule_from_file ( fn ) df = DataFrame ( g ) 149680 \u00d7 15 DataFrame Row \u2502 longitude latitude height height_error datetime intensity sensitivity surface quality nmo \u22ef \u2502 Float64 Float64 Float32 Float32 DateTime Float32 Float32 Bool Bool UIn \u22ef \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 153.855 - 47.2772 - 13.3536 0.307976 2019 - 08 - 30 T10 : 48 : 21.047 393.969 - 0.0671094 true false \u22ef 2 \u2502 153.855 - 47.2769 - 11.2522 0.307978 2019 - 08 - 30 T10 : 48 : 21.055 797.26 0.533529 true true 3 \u2502 153.856 - 47.2767 - 13.775 0.307981 2019 - 08 - 30 T10 : 48 : 21.063 1010.39 0.695938 true true 4 \u2502 153.857 - 47.2765 - 11.729 0.307983 2019 - 08 - 30 T10 : 48 : 21.071 852.614 0.544849 true true 5 \u2502 153.857 - 47.2763 - 13.2443 0.307985 2019 - 08 - 30 T10 : 48 : 21.080 980.66 0.620767 true true \u22ef 6 \u2502 153.858 - 47.2761 - 12.1813 0.307987 2019 - 08 - 30 T10 : 48 : 21.088 937.441 0.620531 true true 7 \u2502 153.859 - 47.2758 - 11.9011 0.30799 2019 - 08 - 30 T10 : 48 : 21.096 1235.02 0.73815 true true 8 \u2502 153.859 - 47.2756 - 12.3796 0.307992 2019 - 08 - 30 T10 : 48 : 21.104 854.127 0.545655 true true Derive linestrings \u00b6 using DataFrames fn = \"ATL03_20181110072251_06520101_003_01.h5\" g = SpaceLiDAR . granule_from_file ( fn ) tlines = DataFrame ( SpaceLiDAR . lines ( g , step = 10000 )) Table with 4 columns and 6 rows : geom sun_angle track datetime \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 wkbLineString25D geometry 38.3864 gt1l_weak 2018 - 11 - 10 T07 : 28 : 01.688 2 \u2502 wkbLineString25D geometry 38.375 gt1r_strong 2018 - 11 - 10 T07 : 28 : 02.266 3 \u2502 wkbLineString25D geometry 38.2487 gt2l_weak 2018 - 11 - 10 T07 : 28 : 04.474 4 \u2502 wkbLineString25D geometry 38.1424 gt2r_strong 2018 - 11 - 10 T07 : 28 : 07.374 5 \u2502 wkbLineString25D geometry 38.2016 gt3l_weak 2018 - 11 - 10 T07 : 28 : 05.051 6 \u2502 wkbLineString25D geometry 38.1611 gt3r_strong 2018 - 11 - 10 T07 : 28 : 06.344 SpaceLiDAR . GDF . write ( \"lines.gpkg\" , tlines )","title":"Usage"},{"location":"tutorial/usage/#usage","text":"","title":"Usage"},{"location":"tutorial/usage/#search-for-data","text":"using SpaceLiDAR # Find all ATL08 granules granules = find ( :ICESat2 , \"ATL08\" ) # Find only ATL03 granules in a part of Vietnam vietnam = ( min_x = 102. , min_y = 8.0 , max_x = 107.0 , max_y = 12.0 ) granules = find ( :ICESat2 , \"ATL08\" , vietnam , \"004\" ) # Find GEDI granules in the same way granules = find ( :GEDI , \"GEDI02_A\" ) # A granule is pretty simple granule = granules [ 1 ] granule . id # filename granule . url # download url granule . info # derived information from id # Downloading granules requires a setup .netrc with an NASA EarthData account # we provide a helper function, that creates/updates a ~/.netrc or ~/_netrc SpaceLiDAR . netrc! ( < username > , < password > ) # replace with your credentials # Afterward you can download (requires curl to be available on PATH) fn = SpaceLiDAR . download! ( granule ) # You can also load a granule from disk granule = granule_from_file ( fn ) # Or from a folder local_granules = granules_from_folder ( < folder > ) # Instantiate search results locally (useful for GEDI location indexing) local_granules = instantiate ( granules , < folder > )","title":"Search for data"},{"location":"tutorial/usage/#derive-points","text":"using DataFrames fn = \"GEDI02_A_2019242104318_O04046_01_T02343_02_003_02_V002.h5\" g = SpaceLiDAR . granule_from_file ( fn ) df = DataFrame ( g ) 149680 \u00d7 15 DataFrame Row \u2502 longitude latitude height height_error datetime intensity sensitivity surface quality nmo \u22ef \u2502 Float64 Float64 Float32 Float32 DateTime Float32 Float32 Bool Bool UIn \u22ef \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 153.855 - 47.2772 - 13.3536 0.307976 2019 - 08 - 30 T10 : 48 : 21.047 393.969 - 0.0671094 true false \u22ef 2 \u2502 153.855 - 47.2769 - 11.2522 0.307978 2019 - 08 - 30 T10 : 48 : 21.055 797.26 0.533529 true true 3 \u2502 153.856 - 47.2767 - 13.775 0.307981 2019 - 08 - 30 T10 : 48 : 21.063 1010.39 0.695938 true true 4 \u2502 153.857 - 47.2765 - 11.729 0.307983 2019 - 08 - 30 T10 : 48 : 21.071 852.614 0.544849 true true 5 \u2502 153.857 - 47.2763 - 13.2443 0.307985 2019 - 08 - 30 T10 : 48 : 21.080 980.66 0.620767 true true \u22ef 6 \u2502 153.858 - 47.2761 - 12.1813 0.307987 2019 - 08 - 30 T10 : 48 : 21.088 937.441 0.620531 true true 7 \u2502 153.859 - 47.2758 - 11.9011 0.30799 2019 - 08 - 30 T10 : 48 : 21.096 1235.02 0.73815 true true 8 \u2502 153.859 - 47.2756 - 12.3796 0.307992 2019 - 08 - 30 T10 : 48 : 21.104 854.127 0.545655 true true","title":"Derive points"},{"location":"tutorial/usage/#derive-linestrings","text":"using DataFrames fn = \"ATL03_20181110072251_06520101_003_01.h5\" g = SpaceLiDAR . granule_from_file ( fn ) tlines = DataFrame ( SpaceLiDAR . lines ( g , step = 10000 )) Table with 4 columns and 6 rows : geom sun_angle track datetime \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 wkbLineString25D geometry 38.3864 gt1l_weak 2018 - 11 - 10 T07 : 28 : 01.688 2 \u2502 wkbLineString25D geometry 38.375 gt1r_strong 2018 - 11 - 10 T07 : 28 : 02.266 3 \u2502 wkbLineString25D geometry 38.2487 gt2l_weak 2018 - 11 - 10 T07 : 28 : 04.474 4 \u2502 wkbLineString25D geometry 38.1424 gt2r_strong 2018 - 11 - 10 T07 : 28 : 07.374 5 \u2502 wkbLineString25D geometry 38.2016 gt3l_weak 2018 - 11 - 10 T07 : 28 : 05.051 6 \u2502 wkbLineString25D geometry 38.1611 gt3r_strong 2018 - 11 - 10 T07 : 28 : 06.344 SpaceLiDAR . GDF . write ( \"lines.gpkg\" , tlines )","title":"Derive linestrings"}]}