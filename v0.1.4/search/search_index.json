{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SpaceLiDAR \u00b6 A Julia toolbox for ICESat-2 and GEDI data. This is a research package now, things are quick to change. Currently supports the following data products: data product User Guide (UG) Algorithm Theoretical Basis Document (ATBD) ICESat GLAH14 v34 UG ATBD ICESat-2 ATL03 v4 UG ICESat-2 ATL08 v4 UG ICESat-2 ATL12 v4 UG GEDI L2A v2 UG For a quick overview, see the FOSS4G Pluto notebook here Papers \u00b6 Results are used (indirectly) in the following papers: Vernimmen, Ronald, Aljosja Hooijer, and Maarten Pronk. 2020. \u2018New ICESat-2 Satellite LiDAR Data Allow First Global Lowland DTM Suitable for Accurate Coastal Flood Risk Assessment\u2019. Remote Sensing 12 (17): 2827. https://doi.org/10/gg9dg6 . Hooijer, A., and R. Vernimmen. 2021. \u2018Global LiDAR Land Elevation Data Reveal Greatest Sea-Level Rise Vulnerability in the Tropics\u2019. Nature Communications 12 (1): 3592. https://doi.org/10/gkzf49 .","title":"Home"},{"location":"#spacelidar","text":"A Julia toolbox for ICESat-2 and GEDI data. This is a research package now, things are quick to change. Currently supports the following data products: data product User Guide (UG) Algorithm Theoretical Basis Document (ATBD) ICESat GLAH14 v34 UG ATBD ICESat-2 ATL03 v4 UG ICESat-2 ATL08 v4 UG ICESat-2 ATL12 v4 UG GEDI L2A v2 UG For a quick overview, see the FOSS4G Pluto notebook here","title":"SpaceLiDAR"},{"location":"#papers","text":"Results are used (indirectly) in the following papers: Vernimmen, Ronald, Aljosja Hooijer, and Maarten Pronk. 2020. \u2018New ICESat-2 Satellite LiDAR Data Allow First Global Lowland DTM Suitable for Accurate Coastal Flood Risk Assessment\u2019. Remote Sensing 12 (17): 2827. https://doi.org/10/gg9dg6 . Hooijer, A., and R. Vernimmen. 2021. \u2018Global LiDAR Land Elevation Data Reveal Greatest Sea-Level Rise Vulnerability in the Tropics\u2019. Nature Communications 12 (1): 3592. https://doi.org/10/gkzf49 .","title":"Papers"},{"location":"changelog/","text":"Unreleased \u00b6 v0.1.3 \u00b6 Added interpolation for GeoArrays Added FOSS4G notebook","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#v013","text":"Added interpolation for GeoArrays Added FOSS4G notebook","title":"v0.1.3"},{"location":"guides/tracks/","text":"Track filtering \u00b6 Coming soon","title":"Tracks"},{"location":"guides/tracks/#track-filtering","text":"Coming soon","title":"Track filtering"},{"location":"reference/api/","text":"API reference \u00b6 SpaceLiDAR._download SpaceLiDAR.angle SpaceLiDAR.angle SpaceLiDAR.angle! SpaceLiDAR.classify SpaceLiDAR.download_curl SpaceLiDAR.gedi_info SpaceLiDAR.granule_from_file SpaceLiDAR.granules_from_folder SpaceLiDAR.in_bbox SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.netrc! SpaceLiDAR.s3! SpaceLiDAR.shift SpaceLiDAR.splitline SpaceLiDAR.track_power # SpaceLiDAR._download \u2014 Method . This is a method because it will segfault if precompiled. source # SpaceLiDAR.angle \u2014 Function . Rough approximation of the track angle on a Euclidian lon/lat plot. source # SpaceLiDAR.angle! \u2014 Method . Calculatitudee angle of direction in degrees where North is 0\u00b0 for a DataFrame. source # SpaceLiDAR.angle \u2014 Method . angle(longitude::Vector{Number}, latitude::Vector{Number}) Calculate the angle of direction from previous points in degrees where North is 0\u00b0. Points are given as longitude and latitude pairs in their own vector. The angle for the first point is undefined and set to the second. Returns a Vector{Number} of angles source # SpaceLiDAR.classify \u2014 Function . Retrieve all points as classified as ground in ATL08. source # SpaceLiDAR.download_curl \u2014 Method . Hacked version of Base.download which adds cookies and (optional) netrc parsing. source # SpaceLiDAR.gedi_info \u2014 Method . Derive info based on file id. The id is built up as follows, see section 2.4 in the user guide GEDI02 A 2019110014613 O01991 T04905 02 001 01.h5 or newer (V2) GEDI02 A 2019242104318 O04046 01 T02343 02 003 02 V002.h5 source # SpaceLiDAR.granule_from_file \u2014 Method . Generate granule from .h5 file. source # SpaceLiDAR.granules_from_folder \u2014 Method . Generate granules from folder filled with .h5 files. source # SpaceLiDAR.in_bbox \u2014 Method . Filter with bbox. source # SpaceLiDAR.info \u2014 Method . Derive info based on file id. The id is built up as follows, see 1.2.5 in the user guide ATL03 yyyymmdd [ttttccss] [vvv rr].h5 source # SpaceLiDAR.info \u2014 Method . Derive info based on file id. The id is built up as follows, see 1.2.5 in the user guide ATL03 yyyymmdd [ttttccss] [vvv rr].h5 source # SpaceLiDAR.netrc! \u2014 Method . Writes/updates netrc file for ICESat-2 and GEDI downloads. source # SpaceLiDAR.s3! \u2014 Function . Change default download locatio n to a S3 bucket. source # SpaceLiDAR.shift \u2014 Method . shift(longitude, latitude, angle, distance) Shift longitude and latitude with distance m in direction angle , where North is 0\u00b0. Returns a tuple of the shifted coordinates: (longitude, latitude) source # SpaceLiDAR.splitline \u2014 Function . Split a linestring if the next point is further than distance . Not using Haversine here, as we want to split on meridians and such. source # SpaceLiDAR.track_power \u2014 Method . Return whether track is a strong or weak beam. See Section 7.5 The Spacecraft Orientation Parameter of the ATL03 ATDB. source","title":"Api"},{"location":"reference/api/#api-reference","text":"SpaceLiDAR._download SpaceLiDAR.angle SpaceLiDAR.angle SpaceLiDAR.angle! SpaceLiDAR.classify SpaceLiDAR.download_curl SpaceLiDAR.gedi_info SpaceLiDAR.granule_from_file SpaceLiDAR.granules_from_folder SpaceLiDAR.in_bbox SpaceLiDAR.info SpaceLiDAR.info SpaceLiDAR.netrc! SpaceLiDAR.s3! SpaceLiDAR.shift SpaceLiDAR.splitline SpaceLiDAR.track_power # SpaceLiDAR._download \u2014 Method . This is a method because it will segfault if precompiled. source # SpaceLiDAR.angle \u2014 Function . Rough approximation of the track angle on a Euclidian lon/lat plot. source # SpaceLiDAR.angle! \u2014 Method . Calculatitudee angle of direction in degrees where North is 0\u00b0 for a DataFrame. source # SpaceLiDAR.angle \u2014 Method . angle(longitude::Vector{Number}, latitude::Vector{Number}) Calculate the angle of direction from previous points in degrees where North is 0\u00b0. Points are given as longitude and latitude pairs in their own vector. The angle for the first point is undefined and set to the second. Returns a Vector{Number} of angles source # SpaceLiDAR.classify \u2014 Function . Retrieve all points as classified as ground in ATL08. source # SpaceLiDAR.download_curl \u2014 Method . Hacked version of Base.download which adds cookies and (optional) netrc parsing. source # SpaceLiDAR.gedi_info \u2014 Method . Derive info based on file id. The id is built up as follows, see section 2.4 in the user guide GEDI02 A 2019110014613 O01991 T04905 02 001 01.h5 or newer (V2) GEDI02 A 2019242104318 O04046 01 T02343 02 003 02 V002.h5 source # SpaceLiDAR.granule_from_file \u2014 Method . Generate granule from .h5 file. source # SpaceLiDAR.granules_from_folder \u2014 Method . Generate granules from folder filled with .h5 files. source # SpaceLiDAR.in_bbox \u2014 Method . Filter with bbox. source # SpaceLiDAR.info \u2014 Method . Derive info based on file id. The id is built up as follows, see 1.2.5 in the user guide ATL03 yyyymmdd [ttttccss] [vvv rr].h5 source # SpaceLiDAR.info \u2014 Method . Derive info based on file id. The id is built up as follows, see 1.2.5 in the user guide ATL03 yyyymmdd [ttttccss] [vvv rr].h5 source # SpaceLiDAR.netrc! \u2014 Method . Writes/updates netrc file for ICESat-2 and GEDI downloads. source # SpaceLiDAR.s3! \u2014 Function . Change default download locatio n to a S3 bucket. source # SpaceLiDAR.shift \u2014 Method . shift(longitude, latitude, angle, distance) Shift longitude and latitude with distance m in direction angle , where North is 0\u00b0. Returns a tuple of the shifted coordinates: (longitude, latitude) source # SpaceLiDAR.splitline \u2014 Function . Split a linestring if the next point is further than distance . Not using Haversine here, as we want to split on meridians and such. source # SpaceLiDAR.track_power \u2014 Method . Return whether track is a strong or weak beam. See Section 7.5 The Spacecraft Orientation Parameter of the ATL03 ATDB. source","title":"API reference"},{"location":"topics/GEDI/","text":"GEDI \u00b6 See their website at gedi.umd.edu","title":"GEDI"},{"location":"topics/GEDI/#gedi","text":"See their website at gedi.umd.edu","title":"GEDI"},{"location":"topics/ICESat-2/","text":"ICESat-2 \u00b6 See their website at icesat-2.gsfc.nasa.gov","title":"ICESat 2"},{"location":"topics/ICESat-2/#icesat-2","text":"See their website at icesat-2.gsfc.nasa.gov","title":"ICESat-2"},{"location":"topics/ICESat/","text":"ICESat \u00b6 See their website at https://icesat.gsfc.nasa.gov/icesat/","title":"ICESat"},{"location":"topics/ICESat/#icesat","text":"See their website at https://icesat.gsfc.nasa.gov/icesat/","title":"ICESat"},{"location":"tutorial/installation/","text":"Installation \u00b6 Use the Julia built in package manager: ] add SpaceLiDAR","title":"Installation"},{"location":"tutorial/installation/#installation","text":"Use the Julia built in package manager: ] add SpaceLiDAR","title":"Installation"},{"location":"tutorial/usage/","text":"Usage \u00b6 Search for data using SpaceLiDAR # Find all ATL08 granules granules = find(:ICESat2, \"ATL08\") # Find only ATL03 granules in a part of Vietnam vietnam = (min_x = 102., min_y = 8.0, max_x = 107.0, max_y = 12.0) granules = find(:ICESat2, \"ATL08\", vietnam, \"004\") # Find GEDI granules in the same way granules = find(:GEDI, \"GEDI02_A\") # A granule is pretty simple granule = granules[1] granule.id # filename granule.url # download url granule.info # derived information from id # Downloading granules requires a setup .netrc with an NASA EarthData account # we provide a helper function, that creates/updates a ~/.netrc or ~/_netrc SpaceLiDAR.netrc!(<username>, <password>) # replace with your credentials # Afterward you can download (requires curl to be available on PATH) fn = SpaceLiDAR.download!(granule) # You can also load a granule from disk granule = granule_from_file(fn) # Or from a folder local_granules = granules_from_folder(<folder>) # Instantiate search results locally (useful for GEDI location indexing) local_granules = instantiate(granules, <folder>) Derive linestrings using DataFrames fn = \"ATL03_20181110072251_06520101_003_01.h5\" g = SpaceLiDAR.granule_from_file(fn) tlines = DataFrame(SpaceLiDAR.lines(g, step=10000)) Table with 4 columns and 6 rows: geom sun_angle track t \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 wkbLineString25D geometry 38.3864 gt1l_weak 2018-11-10T07:28:01.688 2 \u2502 wkbLineString25D geometry 38.375 gt1r_strong 2018-11-10T07:28:02.266 3 \u2502 wkbLineString25D geometry 38.2487 gt2l_weak 2018-11-10T07:28:04.474 4 \u2502 wkbLineString25D geometry 38.1424 gt2r_strong 2018-11-10T07:28:07.374 5 \u2502 wkbLineString25D geometry 38.2016 gt3l_weak 2018-11-10T07:28:05.051 6 \u2502 wkbLineString25D geometry 38.1611 gt3r_strong 2018-11-10T07:28:06.344 SpaceLiDAR.GDF.write(\"lines.gpkg\", tlines)","title":"Usage"},{"location":"tutorial/usage/#usage","text":"Search for data using SpaceLiDAR # Find all ATL08 granules granules = find(:ICESat2, \"ATL08\") # Find only ATL03 granules in a part of Vietnam vietnam = (min_x = 102., min_y = 8.0, max_x = 107.0, max_y = 12.0) granules = find(:ICESat2, \"ATL08\", vietnam, \"004\") # Find GEDI granules in the same way granules = find(:GEDI, \"GEDI02_A\") # A granule is pretty simple granule = granules[1] granule.id # filename granule.url # download url granule.info # derived information from id # Downloading granules requires a setup .netrc with an NASA EarthData account # we provide a helper function, that creates/updates a ~/.netrc or ~/_netrc SpaceLiDAR.netrc!(<username>, <password>) # replace with your credentials # Afterward you can download (requires curl to be available on PATH) fn = SpaceLiDAR.download!(granule) # You can also load a granule from disk granule = granule_from_file(fn) # Or from a folder local_granules = granules_from_folder(<folder>) # Instantiate search results locally (useful for GEDI location indexing) local_granules = instantiate(granules, <folder>) Derive linestrings using DataFrames fn = \"ATL03_20181110072251_06520101_003_01.h5\" g = SpaceLiDAR.granule_from_file(fn) tlines = DataFrame(SpaceLiDAR.lines(g, step=10000)) Table with 4 columns and 6 rows: geom sun_angle track t \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 1 \u2502 wkbLineString25D geometry 38.3864 gt1l_weak 2018-11-10T07:28:01.688 2 \u2502 wkbLineString25D geometry 38.375 gt1r_strong 2018-11-10T07:28:02.266 3 \u2502 wkbLineString25D geometry 38.2487 gt2l_weak 2018-11-10T07:28:04.474 4 \u2502 wkbLineString25D geometry 38.1424 gt2r_strong 2018-11-10T07:28:07.374 5 \u2502 wkbLineString25D geometry 38.2016 gt3l_weak 2018-11-10T07:28:05.051 6 \u2502 wkbLineString25D geometry 38.1611 gt3r_strong 2018-11-10T07:28:06.344 SpaceLiDAR.GDF.write(\"lines.gpkg\", tlines)","title":"Usage"}]}